[color]
    ui = true
[core]
    autocrlf = true
    editor = nvim
    pager = diff-so-fancy | less --tabs=4 -RFX
[merge]
    tool = nvim
[mergetool "nvim"]
    cmd = nvim -f -c \"Gvdiffsplit!\" \"$MERGED\"
[user]
    email = 978080+urob@users.noreply.github.com
    name = urob
[push]
    default = current
[credential]
    # standalone version:
	# helper = /mnt/c/Program\\ Files\\ \\(x86\\)/Git\\ Credential\\ Manager/git-credential-manager.exe
    # Git-for windows version:
    helper = /mnt/c/Program\\ Files/Git/mingw64/bin/git-credential-manager.exe
[interactive]
    diffFilter = diff-so-fancy --patch
[alias]
    # word-diff
    wdiff = diff --color-words=.

    # commit a fixup and autosquash it in interactive rebase
    fixup = "!sh -c '(git diff-files --quiet || (echo Unstaged changes, please commit or stash with --keep-index; exit 1)) && COMMIT=$(git rev-parse $1) && git commit --fixup=$COMMIT && git rebase -i --autosquash $COMMIT~1' -"

    # list files which have changed since GIT_REVIEW_BASE
    # (GIT_REVIEW_BASE defaults to 'main' in env file)
    files = !git diff --name-only $(git merge-base HEAD \"$GIT_REVIEW_BASE\")

    # Same as above, but with a diff stat instead of just names
    # (better for interactive use)
    stat = !git diff --stat $(git merge-base HEAD \"$GIT_REVIEW_BASE\")

    # Open all files changed since GIT_REVIEW_BASE in Vim tabs
    # Then, run fugitive's :Gdiff in each tab, and finally
    # tell vim-gitgutter to show +/- for changes since GIT_REVIEW_BASE
    review = !nvim -p $(git files) +\"tabdo Gdiff $GIT_REVIEW_BASE\" +\"let g:gitgutter_diff_base = '$GIT_REVIEW_BASE'\"

    # Same as the above, except specify names of files as arguments,
    # instead of opening all files:
    # git reviewone foo.js bar.js
    reviewone = !nvim -p +\"tabdo Gdiff $GIT_REVIEW_BASE\" +\"let g:gitgutter_diff_base = '$GIT_REVIEW_BASE'\"

    # add all new/modified/deleted files and then commit
    ac = !git add -A && git commit

    # graph history
    graph = !git -c core.pager='less -RS --mouse --quit-if-one-screen' log --graph \
        --format=\"tformat:%C(dim green)%<|(15,trunc)%ar %C(auto)%h%d %s %C(white)(%aN)\"

    # prune local branches that aren't found upstream
    prune = !git remote update --prune && git branch -vv | \
        awk \"/: gone]/{print $1}\" | xargs git branch -d
[tig "bind"]
    # Colemak-friendly bindings to navigate diff window
    diff = <Down> move-down
    diff = <Up> move-up
    generic = <Right> next
    generic = <Left> previous
