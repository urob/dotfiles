# Set the prefix from `C-b` to `C-a`
set-option -g prefix C-a
unbind C-b              # free the original 'Ctrl-b' to Oher apps
bind C-a send-prefix    # ensure that we can send 'Ctrl-a' to other apps

# Use Ctrl-a Ctrl-a/a to switch to last window
bind C-a last-window
bind a last-window
unbind l

# Reload the file with Prefix r.
bind r source-file $XDG_CONFIG_HOME/tmux/tmux.conf \; display "Reloaded tmux conf"

# Create new tmux window and prompt for a name
# bind-key c command-prompt -p "window name:" "new-window; rename-window '%%'"

# Turn on mouse support
setw -g mouse on

# Prepare for clipboard use of OSC 52 escape sequences
# set -s set-clipboard on

# Renumber remaining windows when one is closed
#set-option renumber-windows on

# Use the mouse drag to re-order windows
bind-key -n MouseDrag1Status swap-window -t=

# Scroll History
set-option -g history-limit 30000

# Fix delay after sending esc
set-option -sg escape-time 10

# Use x and v to split windows, swapped to be consist w/ how vim defines splits
bind x split-window -v -c "#{pane_current_path}"
bind v split-window -h -c "#{pane_current_path}"
unbind '"'
unbind %

# Rebind k to kill pane
bind k confirm-before -p "kill-pane #P? (y/n)" kill-pane

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind -n C-n if-shell "$is_vim" "send-keys C-n" "select-pane -L"
bind -n C-e if-shell "$is_vim" "send-keys C-e" "select-pane -D"
bind -n C-u if-shell "$is_vim" "send-keys C-u" "select-pane -U"
bind -n C-i if-shell "$is_vim" "send-keys C-i" "select-pane -R"
bind -n C-o if-shell "$is_vim" "send-keys C-o" "select-pane -l"
bind -n C-j resize-pane -Z

# bindings for when in copy mode
#bind-key -T copy-mode-vi 'M-n' select-pane -L
#bind-key -T copy-mode-vi 'M-e' select-pane -D
#bind-key -T copy-mode-vi 'M-u' select-pane -U
#bind-key -T copy-mode-vi 'M-i' select-pane -R
#bind-key -T copy-mode-vi 'M-o' select-pane -l

# <prefix> + b toggles status bar
bind b set-option -g status

# make sure we have full color support
set-option -g default-terminal "tmux-256color"
set-option -ag terminal-overrides ',xterm-256color:Tc'

set-option -g focus-events on
# set-option -g visual-bell on

# set terminal titles
set-option -g set-titles on
set-option -g set-titles-string "Tmux / #S"

# +-----------+
# | STATUSBAR |
# +-----------+

# color definitions, hidden attribute requires Tmux v3.2 or later
%hidden cs_bg=default       # background color
%hidden hl_bg=brightblack   # highlight background
%hidden cs_fg=white         # foreground color, copy manually to window-status*-format fg

# status bar globals
setw -g status-style fg=$cs_fg,bg=$cs_bg,none
set-option -g status-interval 2                        # update status every 2 seconds
set-option -g status-justify left                      # juft justify the window list

# hide left status bar (default: session number)
set-option -g status-left ''

# change background for current window
setw -g window-status-current-style fg=$cs_fg,bg=$hl_bg,none

# use multicolor status prompts for all windows (color variables don't work here)
setw -g window-status-current-format ' #[fg=red]#I#[fg=brightwhite]:#W#[fg=brightblue]#F '
setw -g window-status-format ' #[fg=red]#I#[fg=white]:#W#[fg=brightblue]#F '

# status bar right (time / date)
#set-option -g status-right '%-m/%-d · %I:%M %p'    # %-m/%-d/%Y
set-option -g status-right '#{?client_prefix,#[bg=green] - PREFIX - ,%-m/%-d · %I:%M %p}'
set-option -g status-right-length 20

# +--------------+
# | OTHER COLORS |
# +--------------+

# messages
setw -g message-style fg=$cs_fg,bg=green
setw -g message-command-style fg=$cs_fg,bg=blue # vi command mode

# setw -g window-status-bell-style fg=$cs_fg,bg=$hl_bg

# scroll indicator
setw -g mode-style fg=$cs_fg,bg=green

# pane borders
setw -g pane-active-border-style fg=green,bg=default
setw -g pane-border-style fg=brightblack,bg=default

# +----------------------+
# | AUTO-HIDE STATUS BAR |
# +----------------------+
set -g status off
set-hook -g after-new-window      'if "[ #{session_windows} -gt 1 ]" "set status on"'
set-hook -g after-kill-pane       'if "[ #{session_windows} -lt 2 ]" "set status off"'
set-hook -g pane-exited           'if "[ #{session_windows} -lt 2 ]" "set status off"'
set-hook -g window-layout-changed 'if "[ #{session_windows} -lt 2 ]" "set status off"'

# +--------------------+
# | REMOTE CONNECTIONS |
# +--------------------+

# Session is considered to be remote when we ssh into host
if-shell 'test -n "$SSH_CLIENT"' \
    'set-option -g status-right "#h" ; \
     set-option -g status-position bottom'

# Shift-F12 toggles outer session to passthrough all keys into inner session
bind -T root S-F12  \
  set prefix None \;\
  set key-table off \;\
  set status-right '#[bg=blue] - KEYS OFF - ' \;\
  if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
  refresh-client -S \;\

bind -T off S-F12 \
  set -u prefix \;\
  set -u key-table \;\
  set -u status-right \;\
  refresh-client -S

