# interpreter for shell commands
set shell bash

# unbind some of the default binds
# clearmaps
map h
map j
map k
map l
map <c-u>
map <c-d>
map <c-b>
map <c-f>
map <c-y>
map <c-e>
map H
map M
map L

# i toggles bat
map i $bat -n --color=always $f | less -R --lesskey-src=<(echo i quit) --mouse +0
# map i $highlight -O ansi $f | less -R --lesskey-src=<(echo i quit) --mouse +0
# map i $bat -n --color=always --paging=always $f

# general options
set autoquit
set incsearch
set mouse
set preserve "mode:timestamps"
set ifs "\n"                        # IFS for shell commands, affects how cmds work
set shellopts '-eu'                 # safer shell commands

set hidden
set hiddenfiles ".*:lost+found:*.bak"

set dircounts
set info time
set infotimefmtnew "2 Jan 15:04"
set infotimefmtold "2 Jan  2006"

# ANSI escape sequences:
# see https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797#colors--graphics-mode
# reset:        0: reset color and text effects
# text effects: 1: bold, 2:dim, 3: italic, 4: underline, 7: inverse
# fg colors:    30-37 normal, 90-97 bright, 39 default
# bg colors:    40-47 normal, 100-107 bright, 49 default
set cursoractivefmt "\033[7m"
set cursorparentfmt "\033[7m"
set cursorpreviewfmt "\033[0m"

#set icons
#set drawbox
set borderfmt "\033[90m"

set promptfmt  # "\033[34;1m%d\033[0;1m%f \033[31m%F\033[0m"
set rulerfmt "  %a|  %p|  \033[7;31m X:%m \033[0m|  \033[7;33m C:%c \033[0m|  \033[7;35m V:%s \033[0m|  \033[7;34m %f \033[0m| %i/%t [%h]"

set statfmt "\033[36m   %l\033[0m"  # "\033[36m%p\033[0m| %c| %u| %g| %S| %t| -> %l"
set timefmt "_2 Jan 15:04 2006"

set ratios 2:3:4
set previewer ~/.config/lf/preview.sh
set tabstop 4


cmd toggle_preview %{{
    if [ "$lf_preview" = "true" ]; then
        lf -remote "send $id :set ratios 2:7; set preview false"
    else
        lf -remote "send $id :set ratios 2:3:4; set preview true"
    fi
}}
map zp toggle_preview


# Basic functions
# map . set hidden!
# map dd trash
# map dr restore_trash
# map p paste
# map x cut
# map y copy
# map <enter> open
# map R reload
# map mf mkfile
# map md mkdir
# map C clear

cmd eval &{{
    cmd="send $id"
    for arg; do
        cmd="%cmd $(eval "printf '%q' \"$arg\"")"
    done
    lf -remote "$cmd"
}}

# Movements
map gw %lf -remote "send $id cd $WINHOME"

# use enter for shell commands
map <enter> shell

# show the result of execution of previous commands
map ` !true

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# mkdir command. See wiki if you want it to select created dir
map a :push %mkdir<space>

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ "$ans" = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# extract the current file with the right command
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# vim: set ft=bash:
