# zsh prompt configuration

# Inspired by:
# https://github.com/Phantas0s/purification
# https://github.com/agkozak/agkozak-zsh-prompt
#
# TODO:
# - adopt async git status updates
# - add python environment information

# Location of https://github.com/romkatv/gitstatus
source $GITSTATUSDIR/gitstatus.plugin.zsh

# Sets GITSTATUS_PROMPT to reflect the state of the current git repository.
# Empty if not in a git repository. In addition, sets GITSTATUS_PROMPT_LEN to
# the number of columns $GITSTATUS_PROMPT will occupy when printed.
function gitstatus_prompt_update() {
    emulate -L zsh
    typeset -g  GITSTATUS_PROMPT=''
    typeset -gi GITSTATUS_PROMPT_LEN=0

    # Call gitstatus_query synchronously. Note that gitstatus_query can also be
    # called asynchronously; see documentation in gitstatus.plugin.zsh.
    gitstatus_query 'MY'                  || return 1  # error
    [[ $VCS_STATUS_RESULT == 'ok-sync' ]] || return 0  # not a git repo

    # System colors codes: color / brightcolor
    # black:    0 / 8
    # red:      1 / 9
    # green:    2 / 10
    # yellow:   3 / 11
    # blue:     4 / 12
    # magenta:  5 / 13
    # green:    6 / 14
    # white:    7 / 15

    local      clean='%F{white}'   # gray foreground
    local   upstream='%F{13}'
    local   modified='%F{15}'
    local  untracked='%F{12}'
    local conflicted='%F{red}'
    local lambda='%F{12}'

    local ref

    local where  # branch name, tag or commit
    if [[ -n $VCS_STATUS_LOCAL_BRANCH ]]; then
        where=$VCS_STATUS_LOCAL_BRANCH
    elif [[ -n $VCS_STATUS_TAG ]]; then
        ref+='%f#'
        where=$VCS_STATUS_TAG
    else
        ref+='%f@'
        where=${VCS_STATUS_COMMIT[1,8]}
    fi

    (( $#where > 32 )) && where[13,-13]="…"  # truncate long branch names and tags
    ref+="${clean}${where//\%/%%}"           # escape %

    local gstatus

    # ⇣ if behind the remote
    (( VCS_STATUS_COMMITS_BEHIND )) && gstatus+=" ${upstream}⇣"
    # ⇡ if ahead of the remote; no leading space if also behind the remote: ⇣⇡
    (( VCS_STATUS_COMMITS_AHEAD && !VCS_STATUS_COMMITS_BEHIND )) && gstatus+=" "
    (( VCS_STATUS_COMMITS_AHEAD  )) && gstatus+="${upstream}⇡"
    # ⇠ if behind the push remote
    (( VCS_STATUS_PUSH_COMMITS_BEHIND )) && gstatus+=" ${upstream}⇠"
    (( VCS_STATUS_PUSH_COMMITS_AHEAD && !VCS_STATUS_PUSH_COMMITS_BEHIND )) && gstatus+=" "
    # ⇢ if ahead of the push remote; no leading space if also behind: ⇠⇢
    (( VCS_STATUS_PUSH_COMMITS_AHEAD  )) && gstatus+="${upstream}⇢"
    # *42 if have stashes
    (( VCS_STATUS_STASHES        )) && gstatus+=" ${upstream}*${VCS_STATUS_STASHES}"
    # 'merge' if the repo is in an unusual state
    [[ -n $VCS_STATUS_ACTION     ]] && gstatus+=" ${conflicted}${VCS_STATUS_ACTION}"
    # ~42 if have merge conflicts
    (( VCS_STATUS_NUM_CONFLICTED )) && gstatus+=" ${conflicted}~${VCS_STATUS_NUM_CONFLICTED}"
    # + if have staged changes
    (( VCS_STATUS_NUM_STAGED     )) && gstatus+=" ${modified}+"
    # ! if have unstaged changes
    (( VCS_STATUS_NUM_UNSTAGED   )) && gstatus+=" ${modified}!"
    # ? if have untracked files
    (( VCS_STATUS_NUM_UNTRACKED  )) && gstatus+=" ${untracked}?"

    # Put status in brackets if non-empty
    [[ -n ${gstatus} ]] && gstatus="${clean} [${gstatus} ${clean}]%f"

    # Assemble the final git prompt
    GITSTATUS_PROMPT="${lambda}λ${clean}:${ref}${gstatus}"

    # The length of GITSTATUS_PROMPT after removing %f and %F.
    GITSTATUS_PROMPT_LEN="${(m)#${${GITSTATUS_PROMPT//\%\%/x}//\%(f|<->F)}}"
}

# Start gitstatusd instance "MY" (passed to gitstatus_query in gitstatus_prompt_update)
# Use 2nd version to use counters for staged, unstaged, conflicted and untracked
gitstatus_stop 'MY' && gitstatus_start 'MY'
#gitstatus_stop 'MY' && gitstatus_start -s -1 -u -1 -c -1 -d -1 'MY'

# On every prompt, fetch git status and set GITSTATUS_PROMPT
autoload -Uz add-zsh-hook
add-zsh-hook precmd gitstatus_prompt_update

# Configure prompt options
setopt no_prompt_bang prompt_percent prompt_subst

# Prompt:
# %F => color dict
# %f => reset color
# %~ => current path
# %* => time
# %n => username
# %m => shortname host
# %(?..) => prompt conditional - %(condition.true.false)

# Set up the prompt
PROMPT='%F{white}%2~%f %B%F{yellow}»%f%b '
RPROMPT='${GITSTATUS_PROMPT}'
ZLE_RPROMPT_INDENT=0  # no space on right side of right prompt

# Add users@host when in remote sessions
if [[ -n $SSH_CONNECTION ]]; then
    PROMPT='%F{white}[%n@%m]%f '$PROMPT
fi

